name: Build Template Base Image

on:
  push:
    branches: [main]
    paths:
      - "Dockerfile"
      - ".github/workflows/build-template-base.yml"
  workflow_dispatch:

env:
  REGISTRY: us-west1-docker.pkg.dev/proximal-core-0/environments
  IMAGE_NAME: remotion-template-base
  # Enable Dagger Cloud integration
  _EXPERIMENTAL_DAGGER_CLOUD_TOKEN: ${{ secrets.DAGGER_CLOUD_TOKEN }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker to use gcloud credentials
        run: |
          gcloud auth configure-docker us-west1-docker.pkg.dev --quiet

      - name: Get commit SHA (short)
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Dagger SDK
        run: pip install dagger-io

      - name: Build and push template base with Dagger
        env:
          _EXPERIMENTAL_DAGGER_CLOUD_TOKEN: ${{ secrets.DAGGER_CLOUD_TOKEN }}
        run: |
          python3 << 'PYTHON_SCRIPT'
          import sys
          import anyio
          import dagger

          async def build_and_push():
              config = dagger.Config(log_output=sys.stdout)
              async with dagger.Connection(config) as client:
                  # Build from Dockerfile
                  context = client.host().directory(".")
                  container = context.docker_build()
                  
                  # Publish with both tags
                  latest_ref = await container.publish("${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest")
                  sha_ref = await container.publish("${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}")
                  
                  print(f"Published: {latest_ref}")
                  print(f"Published: {sha_ref}")
                  
                  # Extract digest from the reference
                  digest = latest_ref.split("@")[1] if "@" in latest_ref else ""
                  print(f"DIGEST={digest}")

          anyio.run(build_and_push)
          PYTHON_SCRIPT

      - name: Get image digest
        id: digest
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          docker pull ${IMAGE}:latest
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${IMAGE}:latest | cut -d'@' -f2)
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
          echo "ðŸ“¦ Built image with Dagger: ${IMAGE}@${DIGEST}"

      - name: Output digest for environment updates
        run: |
          echo "### Template Base Updated ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** \`${{ steps.digest.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Update environment Dockerfiles to use:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`dockerfile" >> $GITHUB_STEP_SUMMARY
          echo "FROM ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.digest.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View build traces at: https://dagger.cloud/" >> $GITHUB_STEP_SUMMARY